'''
–ó–∞–≤–¥–∞–Ω–Ω—è 5. –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ö–æ–¥—É –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–æ–¥ —ñ–∑ –∑–∞–≤–¥–∞–Ω–Ω—è 4 –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –±—ñ–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ Python, —è–∫–∞ –≤—ñ–∑—É–∞–ª—ñ–∑—É—î –æ–±—Ö–æ–¥–∏ –¥–µ—Ä–µ–≤–∞: —É –≥–ª–∏–±–∏–Ω—É —Ç–∞ –≤ —à–∏—Ä–∏–Ω—É.

–í–æ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–æ–∂–µ–Ω –∫—Ä–æ–∫ —É –≤—É–∑–ª–∞—Ö –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–ª—å–æ—Ä–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ 16-—Å–∏—Å—Ç–µ–º—É RGB (–ø—Ä–∏–∫–ª–∞–¥ #1296F0). –ö–æ–ª—å–æ—Ä–∏ –≤—É–∑–ª—ñ–≤ –º–∞—é—Ç—å –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è –≤—ñ–¥ —Ç–µ–º–Ω–∏—Ö –¥–æ —Å–≤—ñ—Ç–ª–∏—Ö –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –æ–±—Ö–æ–¥—É. –ö–æ–∂–µ–Ω –≤—É–∑–æ–ª –ø—Ä–∏ –π–æ–≥–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—ñ –º–∞—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–ª—ñ—Ä, —è–∫–∏–π –≤—ñ–∑—É–∞–ª—å–Ω–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ö–æ–¥—É.

üëâüèª –ü—Ä–∏–º—ñ—Ç–∫–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Å—Ç–µ–∫ —Ç–∞ —á–µ—Ä–≥—É, –ù–ï —Ä–µ–∫—É—Ä—Å—ñ—é
'''


import matplotlib.pyplot as plt
import networkx as nx
import uuid
from collections import deque
import colorsys

class Node:
    def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
        self.color = "#cccccc"  # default grey
        self.id = str(uuid.uuid4())  # unique identifier

# –ü–æ–±—É–¥–æ–≤–∞ –¥–µ—Ä–µ–≤–∞
def build_sample_tree():
    root = Node(0)
    root.left = Node(4)
    root.left.left = Node(5)
    root.left.right = Node(10)
    root.right = Node(1)
    root.right.left = Node(3)
    return root

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–∞ –∫–æ–ª—å–æ—Ä—ñ–≤ –≤—ñ–¥ —Ç–µ–º–Ω–æ–≥–æ –¥–æ —Å–≤—ñ—Ç–ª–æ–≥–æ
def generate_gradient_colors(n, base_color="#82EB45"):

    base_rgb = tuple(int(base_color[i:i+2], 16)/255. for i in (1, 3, 5))
    hsv = colorsys.rgb_to_hsv(*base_rgb)
    colors = []
    for i in range(n):
        v = 0.3 + 0.7 * (i / max(n - 1, 1))  # —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –≤—ñ–¥ 0.3 –¥–æ 1.0
        rgb = colorsys.hsv_to_rgb(hsv[0], hsv[1], v)
        hex_color = '#' + ''.join(f'{int(c * 255):02X}' for c in rgb)
        colors.append(hex_color)
    return colors

# –û–±—Ö—ñ–¥ —É –≥–ª–∏–±–∏–Ω—É (DFS) –∑—ñ —Å—Ç–µ–∫–æ–º
def dfs_iterative(root):
    stack = [root]
    visited_order = []
    visited_ids = set()

    while stack:
        node = stack.pop()
        if node.id in visited_ids:
            continue
        visited_order.append(node)
        visited_ids.add(node.id)
        # –ø—Ä–∞–≤–∏–π –¥–æ–¥–∞—î—Ç—å—Å—è –ø–µ—Ä—à–∏–º, –±–æ —Å—Ç–µ–∫
        if node.right:
            stack.append(node.right)
        if node.left:
            stack.append(node.left)

    return visited_order

# –û–±—Ö—ñ–¥ —É —à–∏—Ä–∏–Ω—É (BFS) –∑ —á–µ—Ä–≥–æ—é
def bfs_iterative(root):
    queue = deque([root])
    visited_order = []
    visited_ids = set()

    while queue:
        node = queue.popleft()
        if node.id in visited_ids:
            continue
        visited_order.append(node)
        visited_ids.add(node.id)
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)

    return visited_order

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ–∞ –¥–ª—è NetworkX
def add_edges(graph, node, pos, x=0, y=0, layer=1):
    if node is not None:
        graph.add_node(node.id, color=node.color, label=node.val)
        if node.left:
            graph.add_edge(node.id, node.left.id)
            l = x - 1 / 2 ** layer
            pos[node.left.id] = (l, y - 1)
            add_edges(graph, node.left, pos, x=l, y=y - 1, layer=layer + 1)
        if node.right:
            graph.add_edge(node.id, node.right.id)
            r = x + 1 / 2 ** layer
            pos[node.right.id] = (r, y - 1)
            add_edges(graph, node.right, pos, x=r, y=y - 1, layer=layer + 1)
    return graph

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ—Ä–µ–≤–∞
def draw_tree(tree_root, title=""):
    tree = nx.DiGraph()
    pos = {tree_root.id: (0, 0)}
    tree = add_edges(tree, tree_root, pos)

    colors = [tree.nodes[n]['color'] for n in tree.nodes()]
    labels = {n: tree.nodes[n]['label'] for n in tree.nodes()}

    plt.figure(figsize=(8, 5))
    plt.title(title)
    nx.draw(tree, pos=pos, labels=labels, arrows=False,
            node_size=2000, node_color=colors, font_size=12)
    plt.show()

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
def visualize_traversal(traversal_func, title):
    root = build_sample_tree()
    visited_nodes = traversal_func(root)
    gradient = generate_gradient_colors(len(visited_nodes))

    for i, node in enumerate(visited_nodes):
        node.color = gradient[i]

    draw_tree(root, title=title)

# === –ó–∞–ø—É—Å–∫ ===

visualize_traversal(dfs_iterative, "DFS ‚Äî –û–±—Ö—ñ–¥ —É –≥–ª–∏–±–∏–Ω—É")
visualize_traversal(bfs_iterative, "BFS ‚Äî –û–±—Ö—ñ–¥ —É —à–∏—Ä–∏–Ω—É")
